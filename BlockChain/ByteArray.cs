using System;
using System.IO;
using BlockChain.Extensions;

namespace BlockChain 
{
    public abstract class ByteArray : IComparable, IComparable<ByteArray>, IEquatable<ByteArray> {

        public byte[] Raw { get; }

        protected ByteArray(byte[] raw, bool isLittleEndian = false) {
            Raw = raw;

            if(isLittleEndian)
                Array.Reverse(Raw);
        }

        protected ByteArray(byte[] buffer, ref int index, int bytes, bool isLittleEndian = false) {
            Raw = new byte[bytes];

            if (isLittleEndian){
                for (var i = 0; i < bytes; i++)
                    Raw[i] = buffer[index + bytes - i - 1];
            }
            else{
                Buffer.BlockCopy(buffer, index, Raw, 0, bytes);
            }

            index += bytes;
        }

        public byte[] Inner => Raw.ToInnerBytes();

        // 3045022100939ca00af0f116148def90e08506184b1165e86966e1d92cebf42b6823f1f43402203cac1491e77837bc94ee62618067c5a55ee3700312afa1ef38b439d213cdad0702 00666f722065616368206e6561722d68697420696d6d6564696174656c792c20616e6420746865206f70657261746f722074616b657320746865207269736b2066726f6d2072616e646f6d6e657373206f6620686176696e67206d6f7265206f72206c657373206e6561722d68697473206265666f7265206120626c6f636b20697320666f756e642e203c6272202f3e3c6272202f3e456974686572207761792c2074686520757365722077686f207375626d6974732074686520686974207468617420736f6c7665732074686520626c6f636b2073686f756c642067657420616e20657874726120616d6f756e74206f66662074686520746f702c206c696b65203130204254432e3c6272202f3e3c6272202f3e4e657720757365727320776f756c646e26233033393b74207265616c6c79206576656e206e6565642074686520426974636f696e20736f6674776172652e20266e6273703b5468657920636f756c6420646f776e6c6f61642061206d696e65722c00 0063726561746520616e206163636f756e74206f6e206d74676f78206f72206d79626974636f696e2c20656e746572207468656972206465706f736974206164647265737320696e746f20746865206d696e657220616e6420706f696e7420697420617420616e796f6e6526233033393b7320706f6f6c207365727665722e20266e6273703b5768656e20746865206d696e6572207361797320697420666f756e6420736f6d657468696e672c2061207768696c65206c6174657220612066657720636f696e732073686f7720757020696e207468656972206163636f756e742e3c6272202f3e3c6272202f3e4d696e6572207772697465727320626574746572206d616b6520737572652074686579206e657665722066616c73652d706f736974697665206e6561722d686974732e266e6273703b2055736572732077696c6c20646570656e64206f6e207468617420746f20636865636b2069662074686520706f6f6c206f70657261746f72206973206368656174696e6700 007468656d2e20266e6273703b496620746865206d696e65722077726f6e676c79207361797320697420666f756e6420736f6d657468696e672c2075736572732077696c6c206c6f6f6b20696e207468656972206163636f756e742c206e6f742066696e6420616e797468696e672c20616e6420676574206d61642061742074686520706f6f6c206f70657261746f722e0032353133380931393331093609313239303936343338310932353138300931323930393734383739097361746f73686920787809310952653a205246433a207368697020626c6f636b20636861696e20312d373430303020776974682072656c656173652074617262616c6c733f09446573706974652065766572797468696e6720656c736520736169642c207468652063757272656e74206e65787420737465702069733a3c6272202f3e5b71756f74655d3c6272202f3e536f6d656f6e652073686f756c64206578706572696d656e74207769746820646966666572656e74204265726b656c65792044422073657474696e677320616e642073656520696620746865726526233033393b7320736f6d657468696e672074686174206d616b65732074686520646f776e6c6f6164207375627374616e7469616c6c79206661737465722e20266e6273703b496600 a914cd386177aa30469944c12521c87f31df7e6368ac88a91477f246c348fd5777594518cd03a417983a408c6188a914742034da22736f3131dd878ce994f7fd9cc35e83882102e1fd747026040b1cd5d2e3e3f180225963d88c44ba691e01ed3d038e482dd8bcad0075740087	
        // 3044022026f3d6d2658ce6de06787a1c36291b678adfcd8fe1b800a7b0704488cde05f280220047029a02e438e3b70ac883c5f46e1b73ba22788b24ddcd55002806d2d4d740902 00736f6d657468696e67207375627374616e7469616c20697320646973636f76657265642c207468656e2077652063616e20776f726b206f75742074686520706172746963756c6172732e3c6272202f3e5b2f71756f74655d3c6272202f3e496e20706172746963756c61722c204920737573706563742074686174206d6f726520726561642063616368696e67206d696768742068656c702061206c6f742e3c6272202f3e3c6272202f3e5b71756f746520617574686f723d6a6761727a696b206c696e6b3d746f7069633d313933312e6d73673235303137236d7367323530313720646174653d313239303931313630395d3c6272202f3e416e6f74686572206e65772075736572206f6e204952432c204c696e757820746869732074696d652c2077617320646f776e6c6f6164696e6720617420612072617465206f66203120626c6f636b2065766572792034207365636f6e6473202d2d20657374696d6174656420746f74616c20646f776e6c6f616400 0074696d652061726f756e64203420646179732e3c6272202f3e5b2f71756f74655d3c6272202f3e5468656e20736f6d657468696e67206d6f7265207370656369666963207761732077726f6e672e20266e6273703b5468617426233033393b73206e6f742064756520746f206e6f726d616c20696e697469616c20646f776e6c6f61642074696d652e20266e6273703b576974686f7574206d6f72652064657461696c732c2069742063616e26233033393b7420626520646961676e6f7365642e20266e6273703b4966206974207761732064756520746f20736c6f7720646f776e6c6f61642c206469642069742073706565642075702061667465722031302d3230206d696e75746573207768656e20746865206e65787420626c6f636b2062726f6164636173742073686f756c642068617665206d6164652069742073776974636820746f20612066617374657220736f757263653f20266e6273703b64656275672e6c6f67206d69676874206861766500 00636c7565732e20266e6273703b486f77206661737420697320746865697220496e7465726e657420636f6e6e656374696f6e3f20266e6273703b576173206974207374656164696c7920736c6f772c206f72206a75737420736c6f7720646f776e206174206f6e6520706f696e743f3c6272202f3e3c6272202f3e5b71756f74655d3c6272202f3e57652068617665207468652068617368657320666f722067656e6573697320626c6f636b207468726f75676820626c6f636b2037343030302068617264636f6465642028636f6d70696c65642920696e746f20626974636f696e2c20736f20746865726526233033393b73206e6f20726561736f6e207768792077652073686f756c646e26233033393b742062652061626c6520746f206175746f6d61746963616c6c7920646f776e6c6f6164206120636f6d70726573736564207a697066696c65206f662074686520626c6f636b2064617461626173652066726f6d205b695d616e7977686572655b2f695d2c00 a914a36a60cd0534db8c845704331e98c520bf6c2ed788a914a3f306d8a8f2763fbe241db5167bfbadf11dbe9f88a9147258a4f06ad8d7b5e07974f9a530279bc5427531882102e1fd747026040b1cd5d2e3e3f180225963d88c44ba691e01ed3d038e482dd8bcad5175740087	

        public string OpString{
            get{
                if (Raw.IsStandardTransactionToBitcoinAddress()){
                    return "OP_DUP OP_HASH160 " + Inner.ToHex() + " OP_EQUALVERIFY OP_CHECKSIG";
                }

                if (Raw.IsOpHashEqual()){
                    return "<" + Inner.ToHex() + ">";
                }

                if (Raw.IsOp1() || Raw.IsOp1V2()){
                    return "OP_1 " + Raw.ToOp1Bytes().ToHex() + " OP_1 OP_CHECKMULTISIG";
                }

                if (Raw.IsOp2()){
                    return "OP_1 " + Raw.ToOp2Bytes().ToHex() + " OP_2 OP_CHECKMULTISIG";
                }

                if (Raw.IsOp3()){
                    return "OP_1 " + Raw.ToOp3Bytes().ToHex() + " OP_3 OP_CHECKMULTISIG";
                }

                return "OP_??? " + Raw.ToHex();
            }
        }

        public override string ToString() {
            return Raw.ToHex();
        }

        public bool Equals(ByteArray other) {
            return CompareTo(other) == 0;
        }

        public override bool Equals(object obj) {
            var value = obj as ByteArray;

            if(value != null)
                return Equals(value);

            return false;
        }

        public override int GetHashCode() {
            return Raw.GetHashCode();
        }

        public int CompareTo(object obj) {
            return CompareTo((ByteArray)obj);
        }

        public int CompareTo(ByteArray other) {
            var diff = Raw.Length - other.Raw.Length;

            if(diff != 0)
                return diff;

            for(var i = 0; i < Raw.Length; i++) {
                diff = Raw[i] - other.Raw[i];
                if(diff != 0)
                    return diff;
            }

            return 0;
        }
    }

}
